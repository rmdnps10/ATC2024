import * as THREE from 'three'
import { Canvas, extend } from '@react-three/fiber'
import {
  useAnimations,
  useGLTF,
  MeshPortalMaterial,
  CameraControls,
  Text,
  Sky
} from '@react-three/drei'
import { geometry } from 'maath'
import { suspend } from 'suspend-react'

extend(geometry)
const GOLDENRATIO = 1.61803398875
// const regular = import('@pmndrs/assets/fonts/inter_regular.woff')
// const medium = import('@pmndrs/assets/fonts/inter_medium.woff')
// const zPlane = new THREE.Plane(new THREE.Vector3(0, 0, 1), 0)
// const yPlane = new THREE.Plane(new THREE.Vector3(0, 1, 0), 1)

export const App = () => (
  //   <Canvas
  //     gl={{ localClippingEnabled: true }}
  //     camera={{ fov: 75, position: [0, 0, 1.5] }}
  //     eventSource={document.getElementById('root')}
  //     eventPrefix="client">
  //     <color
  //       attach="background"
  //       args={['#f0f0f0']}
  //     />
  <>
    <Frame
      id="01"
      name="ATC"
      author="WEBWEBWEB"
      scale={20}
      position={[0, 17.5, 0]}>
      <ambientLight intensity={0.5} />
      <directionalLight
        position={[5, 5, 5]}
        intensity={1}
      />
      <Sky />
      <Model position={[0, -2, 0]} />
    </Frame>
    {/* <Model
      clip
      position={[0, -2, 0]}
    /> */}
    <CameraControls
      makeDefault
      minAzimuthAngle={-Math.PI / 2.5}
      maxAzimuthAngle={Math.PI / 2.5}
      minPolarAngle={0.5}
      maxPolarAngle={Math.PI / 2}
    />
  </>
  //   </Canvas>
)

/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.3 mccree.glb
Author: Seafoam (https://sketchfab.com/seafoam)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/low-poly-mccree-38aedc02c0b2412babdc4d0eac7c6803
Title: Low poly McCree
*/
function Model({ clip, ...props }) {
  //   const { nodes, materials } = useGLTF(
  //     './model/low_poly_mccree-transformed.glb'
  //   )
  const { scene: fishScene, animations: fishAnimations } = useGLTF(
    './model/fishfast.glb'
  )
  const { actions } = useAnimations(fishAnimations, fishScene)

  const action = actions[fishAnimations[0].name]
  action.play()

  //   const model = useGLTF('./model/only_fish.glb')
  //   console.log(model)

  return (
    // <mesh
    //   geometry={nodes.base.geometry}
    //   {...props}
    //   dispose={null}>
    //   <meshBasicMaterial
    //     map={materials.PaletteMaterial001.map}
    //     side={THREE.DoubleSide}
    //     clippingPlanes={clip ? [zPlane, yPlane] : null}
    //   />
    // </mesh>
    <primitive
      object={fishScene}
      scale={5}
      position={[0, -0.5, -1]}
    />
  )
}

function Frame({
  id,
  name,
  author,
  bg,
  width = 1,
  height = GOLDENRATIO,
  children,
  ...props
}) {
  return (
    <group {...props}>
      {/* <Text
        font={suspend(medium).default}
        color="black"
        fontSize={0.25}
        letterSpacing={-0.025}
        anchorY="top"
        anchorX="left"
        lineHeight={0.8}
        position={[-0.375, 0.715, 0.01]}>
        {name}
      </Text>
      <Text
        font={suspend(regular).default}
        color="black"
        fontSize={0.1}
        anchorX="right"
        position={[0.4, -0.659, 0.01]}>
        /{id}
      </Text>
      <Text
        font={suspend(regular).default}
        color="black"
        fontSize={0.04}
        anchorX="left"
        position={[0.0, -0.677, 0.01]}>
        {author}
      </Text> */}
      <mesh name={id}>
        <roundedPlaneGeometry args={[width, height, 0.1]} />
        <MeshPortalMaterial>{children}</MeshPortalMaterial>
      </mesh>
      <mesh
        name={id}
        position={[0, 0, -0.001]}>
        <roundedPlaneGeometry args={[width + 0.05, height + 0.05, 0.12]} />
        <meshBasicMaterial color="black" />
      </mesh>
    </group>
  )
}
